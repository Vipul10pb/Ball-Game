import tkinter as tk
import random

# Class representing the ball in the game
class Ball:
    def __init__(self, canvas, color):
        # Initialize ball with a given color and position
        self.canvas = canvas
        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)
        self.canvas.move(self.id, 245, 100)
        self.x = 0
        self.y = 1
        self.canvas_height = self.canvas.winfo_height()
        self.canvas_width = self.canvas.winfo_width()
        self.speed = 1  # Initial speed of the ball

    # Method to draw and move the ball
    def draw(self):
        self.canvas.move(self.id, self.x * self.speed, self.y * self.speed)
        pos = self.canvas.coords(self.id)
        # Bounce off the top and bottom walls
        if pos[1] <= 0:
            self.y = 1
        if pos[3] >= self.canvas_height:
            self.y = -1
        # Bounce off the left and right walls
        if pos[0] <= 0:
            self.x = 1
        if pos[2] >= self.canvas_width:
            self.x = -1

    # Method to increase the speed of the ball
    def increase_speed(self):
        self.speed += 0.1  # Increase speed by a small increment

# Class representing the paddle in the game
class Paddle:
    def __init__(self, canvas, color):
        # Initialize paddle with a given color and position
        self.canvas = canvas
        self.id = canvas.create_rectangle(0, 0, 100, 10, fill=color)
        self.canvas.move(self.id, 200, 300)
        self.x = 0
        self.canvas_width = self.canvas.winfo_width()
        # Bind arrow keys for paddle movement
        self.canvas.bind_all('<KeyPress-Left>', self.move_left)
        self.canvas.bind_all('<KeyPress-Right>', self.move_right)

    # Method to draw and move the paddle
    def draw(self):
        self.canvas.move(self.id, self.x, 0)
        pos = self.canvas.coords(self.id)
        # Prevent paddle from moving beyond canvas boundaries
        if pos[0] <= 0:
            self.x = 0
        elif pos[2] >= self.canvas_width:
            self.x = 0

    # Method to move the paddle left
    def move_left(self, evt):
        self.x = -2

    # Method to move the paddle right
    def move_right(self, evt):
        self.x = 2

# Main game class
class CatchTheBallGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Catch the Ball Game")

        # Create and set up the canvas
        self.canvas = tk.Canvas(root, width=500, height=400, bd=0, highlightthickness=0)
        self.canvas.pack()
        self.root.update()

        # Create ball and paddle objects
        self.ball = Ball(self.canvas, 'pink')
        self.paddle = Paddle(self.canvas, 'black')

        self.game_over_text = None
        self.score = 0
        # Display score on the canvas
        self.score_text = self.canvas.create_text(450, 20, text=f"Score: {self.score}", fill="black", font=("Helvetica", 16))

        self.is_game_over = False

        # Start the game loop
        self.run_game()

    # Main game loop
    def run_game(self):
        while not self.is_game_over:
            self.ball.draw()
            self.paddle.draw()
            self.check_collision()
            self.root.update_idletasks()
            self.root.update()
            self.canvas.after(10)

        self.show_game_over()

    # Method to check for collisions between the ball and the paddle
    def check_collision(self):
        ball_pos = self.canvas.coords(self.ball.id)
        paddle_pos = self.canvas.coords(self.paddle.id)

        # Check if the ball hits the paddle
        if ball_pos[3] >= paddle_pos[1] and paddle_pos[0] < ball_pos[2] and paddle_pos[2] > ball_pos[0]:
            self.ball.y = -1
            self.score += 1
            # Update score display
            self.canvas.itemconfig(self.score_text, text=f"Score: {self.score}")
            # Increase ball speed
            self.ball.increase_speed()
        # Check if the ball hits the bottom of the canvas
        elif ball_pos[3] >= self.canvas.winfo_height():
            self.is_game_over = True

    # Method to display the game over text
    def show_game_over(self):
        self.game_over_text = self.canvas.create_text(250, 200, text="GAME OVER", fill="red", font=("Helvetica", 30))

# Create the Tkinter root window and start the game
if __name__ == "__main__":
    root = tk.Tk()
    game = CatchTheBallGame(root)
    root.mainloop()

